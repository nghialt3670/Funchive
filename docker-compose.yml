services:
  funchive-auth-server:
    build:
      context: ./auth-server
      dockerfile: Dockerfile
    container_name: funchive-auth-server
    environment:
      - FUNCHIVE_CONFIG_SERVER_URL=http://funchive-config-server:8888
    networks:
      - funchive-network
    depends_on:
      funchive-config-server:
        condition: service_healthy

  funchive-auth-postgres:
    image: postgres:16
    container_name: funchive-auth-postgres
    networks:
      - funchive-network
    environment:
      POSTGRES_DB: ${FUNCHIVE_USER_POSTGRES_DATABASE}
      POSTGRES_USER: ${FUNCHIVE_USER_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${FUNCHIVE_USER_POSTGRES_PASSWORD}
    volumes:
      - funchive-auth-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FUNCHIVE_USER_POSTGRES_USERNAME} -d ${FUNCHIVE_USER_POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  funchive-config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: funchive-config-server
    networks:
      - funchive-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  funchive-discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: funchive-discovery-server
    environment:
      - FUNCHIVE_CONFIG_SERVER_URL=http://funchive-config-server:8888
    networks:
      - funchive-network
    depends_on:
      funchive-config-server:
        condition: service_healthy

  funchive-gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    container_name: funchive-gateway-server
    environment:
      - FUNCHIVE_CONFIG_SERVER_URL=http://funchive-config-server:8888
    networks:
      - funchive-network
    depends_on:
      funchive-config-server:
        condition: service_healthy

  funchive-function-service:
    build:
      context: ./function-service
      dockerfile: Dockerfile
    container_name: funchive-function-service
    environment:
      - FUNCHIVE_CONFIG_SERVER_URL=http://funchive-config-server:8888
    networks:
      - funchive-network
    depends_on:
      funchive-config-server:
        condition: service_healthy

  funchive-function-mongo:
    image: mongo:7.0
    container_name: funchive-function-mongo
    networks:
      - funchive-network
    environment:
      MONGO_INITDB_DATABASE: ${FUNCHIVE_FUNCTION_MONGO_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${FUNCHIVE_FUNCTION_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${FUNCHIVE_FUNCTION_MONGO_PASSWORD}
    volumes:
      - funchive-function-mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  funchive-sandbox-service:
    build:
      context: ./sandbox-service
      dockerfile: Dockerfile
    container_name: funchive-sandbox-service
    environment:
      - FUNCHIVE_CONFIG_SERVER_URL=http://funchive-config-server:8888
    networks:
      - funchive-network
    depends_on:
      funchive-config-server:
        condition: service_healthy

  funchive-storage-service:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    container_name: funchive-storage-service
    environment:
      - FUNCHIVE_CONFIG_SERVER_URL=http://funchive-config-server:8888
    networks:
      - funchive-network
    depends_on:
      funchive-config-server:
        condition: service_healthy

  funchive-storage-mongo:
    image: mongo:7.0
    container_name: funchive-storage-mongo
    networks:
      - funchive-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${FUNCHIVE_STORAGE_MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${FUNCHIVE_STORAGE_MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: funchive_storage
    volumes:
      - funchive-storage-mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  funchive-zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: funchive-zookeeper
    networks:
      - funchive-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - funchive-zookeeper-data:/var/lib/zookeeper/data
      - funchive-zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  funchive-kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: funchive-kafka
    networks:
      - funchive-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: funchive-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://funchive-kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - funchive-kafka-data:/var/lib/kafka/data
    depends_on:
      funchive-zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  funchive-web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: funchive-web
    networks:
      - funchive-network

networks:
  funchive-network:
    driver: bridge
    name: funchive-network

volumes:
  config-server-data:
    driver: local
  funchive-auth-postgres-data:
    driver: local
  funchive-function-mongo-data:
    driver: local
  funchive-storage-mongo-data:
    driver: local
  funchive-zookeeper-data:
    driver: local
  funchive-zookeeper-logs:
    driver: local
  funchive-kafka-data:
    driver: local